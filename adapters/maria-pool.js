// Generated by CoffeeScript 1.4.0
(function() {
  var Client, PoolModule, Query, exports, maria_pool,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Query = require('../query');

  PoolModule = require('generic-pool');

  Client = require('mariasql');

  /*
  maria-pool 适配合器
  @link 
  @install npm install mariasql
  */


  maria_pool = (function(_super) {

    __extends(maria_pool, _super);

    function maria_pool() {
      return maria_pool.__super__.constructor.apply(this, arguments);
    }

    maria_pool.connection = false;

    maria_pool.create_connection = function(cfg) {
      var connection;
      if (cfg == null) {
        cfg = {
          host: '127.0.0.1',
          user: 'root',
          password: '',
          database: 'test',
          port: 3306,
          client: 'TCP'
        };
      }
      return connection = PoolModule.Pool({
        name: 'maria',
        create: function(callback) {
          var c;
          c = new Client();
          c.connect({
            host: cfg.host,
            user: cfg.user,
            password: cfg.password,
            port: cfg.port,
            database: cfg.database
          });
          return c.on('connect', function() {
            console.log('Client connected');
            return callback(null, c);
          }).on('error', function(err) {
            console.log('Client error: ' + err);
            return callback(err, null);
          }).on('close', function(hadError) {
            return console.log('Client closed');
          });
        },
        destroy: function(client) {
          return client.end();
        },
        max: 10,
        min: 2,
        idleTimeoutMillis: 30000,
        log: true
      });
    };

    maria_pool.prototype.adapter = function(sql, args, callback) {
      if (!this.connection) {
        return this.connection.acquire(function(err, client) {
          var db, result;
          if (err) {
            return callback(err, null);
          } else {
            result = [];
            db = client.query(sql, args);
            db.on('result', function(res) {
              return res.on('row', function(row) {
                console.log('Result row: ' + inspect(row));
                return result.push(row);
              }).on('error', function(err) {
                return console.log('Result error: ' + inspect(err));
              }).on('end', function(info) {
                console.log('Result finished successfully');
                return callback(null, result);
              });
            });
            return db.on('end', function() {
              console.log('Done with all results');
              return pool.release(client);
            });
          }
        });
      }
    };

    return maria_pool;

  })(Query);

  exports = module.exports = maria_pool;

}).call(this);
