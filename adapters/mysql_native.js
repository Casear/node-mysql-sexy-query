// Generated by CoffeeScript 1.3.3
(function() {
  var Query, exports, mysql_native,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Query = require('../query');

  /*
  mysql-native 适配合器
  @link https://github.com/sidorares/nodejs-mysql-native
  @install npm install mysql-native
  */


  mysql_native = (function(_super) {

    __extends(mysql_native, _super);

    function mysql_native() {
      return mysql_native.__super__.constructor.apply(this, arguments);
    }

    mysql_native.prototype.connection = false;

    mysql_native.create_connection = function(cfg) {
      var db;
      if (cfg == null) {
        cfg = {
          host: '127.0.0.1',
          user: 'root',
          password: '',
          database: 'test',
          port: 3306,
          client: 'TCP'
        };
      }
      if (cfg.client === 'UNIX') {
        db = require('mysql-native').createUNIXClient(cfg.path);
      } else {
        db = require('mysql-native').createTCPClient(cfg.host, cfg.port);
      }
      db.set('auto_prepare', true);
      db.set('charset', 'utf8_general_cs');
      db.auth(cfg.database, cfg.user, cfg.password);
      return db;
    };

    mysql_native.prototype.adapter = function(sql, args, callback) {
      var db;
      if (this.connection) {
        db = this.connection.execute(sql, args);
        if (this._query_type !== 'SELECT') {
          db.on('end', function() {
            return callback(this.result);
          });
        } else {
          db.on('row', function(r) {
            if (r.length === void 0) {
              return callback([r]);
            }
            if (r === false) {
              return callback([]);
            }
            return callback(r);
          });
        }
        return db.on('error', function(e) {
          return callback(false, e.message);
        });
      }
    };

    return mysql_native;

  })(Query);

  exports = module.exports = mysql_native;

}).call(this);
